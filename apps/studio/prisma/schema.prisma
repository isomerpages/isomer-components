// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator kysely {
  provider = "prisma-kysely"

  // Optionally provide a destination directory for the generated file
  // and a filename of your choice
  output       = "../src/db"
  fileName     = "types.ts"
  // Optionally generate runtime enums to a separate file
  enumFileName = "enums.ts"
}

model VerificationToken {
  identifier String   @id
  token      String
  attempts   Int      @default(0)
  expires    DateTime
}

model Resource {
  id             String       @id @default(cuid())
  name           String
  siteId         String
  parentId       String?
  lastEditTime   DateTime
  lastEditUserId Int
  blobId         String?      @unique
  variant        ResourceType
  userId         String

  site         Site         @relation(fields: [siteId], references: [id])
  parent       Resource?    @relation("parentRelation", fields: [parentId], references: [id])
  child        Resource[]   @relation("parentRelation")
  lastEditUser User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Don't delete the file if the user is deleted
  blob         Blob?
  Permission   Permission[]

  @@unique([siteId, parentId, name], name: "uniqueChildNames")
}

model User {
  id    String @id @default(cuid())
  name  String
  email String @unique
  phone String @unique

  Resource   Resource[]
  Permission Permission[]
}

model Permission {
  id         String   @id @default(cuid())
  resourceId String
  userId     String
  role       RoleType

  // Delete the row if either resource or user is deleted, default behavior cascade
  resource Resource @relation(fields: [resourceId], references: [id])
  user     User     @relation(fields: [userId], references: [id])

  // userId and resource Id should be unique? Each user should have unambiguous access to resource? Or not if we take the strictest or laxest perm for the user
  @@unique([userId, resourceId], name: "unambiguousPermissionsPerUserResource")
}

model Site {
  id   String @id @default(cuid())
  name String @unique

  Resource Resource[]
}

model Blob {
  id          String @id @default(cuid())
  blobContent Json

  // Should the blob be deleted on deletion of the resource? 
  resource Resource @relation(fields: [id], references: [blobId])
}

enum ResourceType {
  PageResource
  FolderResource
}

enum RoleType {
  Admin
  Editor
  Publisher
}
